name: Test BRRTRouter

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      BRRTR_LOCAL: "1"
      RUST_BACKTRACE: "1"
      RUST_LOG: "debug"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        if: ${{ !env.ACT }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-v2-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-v2-

      - name: Install Just
        uses: extractions/setup-just@v3

      - name: Cargo build
        #run: cargo build --all --all-features # this will also build the example projects, which are currently broken
        run: cargo build

      - name: Generate handlers
        run: cargo run --bin brrtrouter-gen -- generate --spec examples/openapi.yaml --force

      - name: Cargo build again with handlers
        #run: cargo build --all --all-features # this will also build the example projects, which are currently broken
        run: cargo build

      - name: Build generator (release)
        run: cargo build --release --bin brrtrouter-gen

      - name: Upload generator artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: brrtrouter-gen-linux
          path: target/release/brrtrouter-gen
          retention-days: 1

      - name: Install musl target for pet_store
        run: rustup target add x86_64-unknown-linux-musl

      - name: Install musl tools (provides musl-gcc for ring)
        run: sudo apt-get update || apt-get update && (sudo apt-get install -y musl-tools || apt-get install -y musl-tools)

      - name: Install cargo-zigbuild (for curl_harness cross-compilation)
        run: cargo install cargo-zigbuild --locked

      - name: Build pet_store (musl, release)
        env:
          CC_x86_64_unknown_linux_musl: musl-gcc
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
        run: cargo build --release -p pet_store --target x86_64-unknown-linux-musl

      - name: Upload pet_store binary artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: pet_store-musl
          path: target/x86_64-unknown-linux-musl/release/pet_store
          retention-days: 1

      - name: Lint with Clippy
        # run: cargo clippy --all-targets --all-features -- -D warnings || true - runs clippy on all targets and features, but fails the build on warnings
        run: cargo clippy -- -D warnings || true

      - name: Check documentation
        run: |
          echo "Checking for missing documentation and broken intra-doc links..."
          RUSTDOCFLAGS="-D warnings -D rustdoc::broken_intra_doc_links --html-in-header doc/head.html" cargo doc --no-deps --lib || true
          echo "Documentation check complete (warnings are informational only)"

      # Nextest provides faster, more reliable test execution
      # - Parallel test execution with better isolation
      # - Better output formatting and failure reporting
      # - Handles flaky tests better with retries
      # If nextest succeeds, we can phase out the legacy cargo test
      - name: Install cargo-nextest
        run: cargo install cargo-nextest --locked

      - name: Run tests (nextest - primary)
        run: cargo nextest run --workspace --all-targets --fail-fast --no-capture
        env:
          RUST_BACKTRACE: 1

      # Legacy fallback: only runs if nextest fails
      # Once we confirm nextest is stable in CI, we can remove this
      - name: Run tests (cargo test - legacy fallback)
        if: failure()
        run: cargo test -- --nocapture

      - name: Install cargo-llvm-cov
        if: ${{ !env.ACT }}
        run: cargo install cargo-llvm-cov

      - name: Measure coverage
        if: ${{ !env.ACT }}
        run: cargo llvm-cov  #--no-report

  tilt-ci:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: "1"
      RUST_LOG: "info"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install musl target
        run: rustup target add x86_64-unknown-linux-musl

      - name: Install musl tools and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install cargo-zigbuild for cross-compilation
        run: cargo install cargo-zigbuild

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: brrtrouter-ci
          wait: 60s

      - name: Verify cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Tilt
        run: |
          curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
          tilt version

      - name: Build BRRTRouter and Pet Store binaries
        run: |
          cargo zigbuild --release --target x86_64-unknown-linux-musl
          cargo run --bin brrtrouter-gen -- generate --spec examples/openapi.yaml --force
          cargo zigbuild --release --target x86_64-unknown-linux-musl -p pet_store
          mkdir -p build_artifacts
          cp target/x86_64-unknown-linux-musl/release/pet_store build_artifacts/

      - name: Build sample UI (if exists)
        run: |
          if [ -d "sample-ui" ]; then
            cd sample-ui
            if command -v yarn &> /dev/null && [ -f "package.json" ]; then
              echo "Building sample UI with yarn..."
              yarn install
              yarn build:petstore || true
            fi
          fi

      - name: Run Tilt CI
        run: |
          echo "Starting Tilt CI - will build, deploy, and wait for services to be healthy"
          tilt ci --timeout 10m
        timeout-minutes: 12

      - name: Check deployment status
        if: always()
        run: |
          echo "=== Kubernetes Resources ==="
          kubectl get all -n brrtrouter-dev
          
          echo ""
          echo "=== Pet Store Logs ==="
          kubectl logs -n brrtrouter-dev deployment/petstore --tail=100 || true
          
          echo ""
          echo "=== OTEL Collector Logs ==="
          kubectl logs -n brrtrouter-dev deployment/otel-collector --tail=50 || true

      - name: Test Pet Store API
        run: |
          echo "Forwarding Pet Store port..."
          kubectl port-forward -n brrtrouter-dev service/petstore 8080:8080 &
          PF_PID=$!
          sleep 5
          
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health || (echo "Health check failed" && exit 1)
          
          echo "Testing metrics endpoint..."
          curl -f http://localhost:8080/metrics | grep brrtrouter || (echo "Metrics check failed" && exit 1)
          
          echo "Testing authenticated endpoint..."
          curl -f -H "X-API-Key: test123" http://localhost:8080/pets || (echo "Auth test failed" && exit 1)
          
          echo "Checking per-path metrics..."
          curl -f http://localhost:8080/metrics | grep brrtrouter_path_requests_total || (echo "Per-path metrics missing" && exit 1)
          
          kill $PF_PID || true
          
          echo "✅ All API tests passed!"

      - name: Test observability stack
        run: |
          echo "Checking Prometheus..."
          kubectl port-forward -n brrtrouter-dev service/prometheus 9090:9090 &
          PROM_PID=$!
          sleep 3
          curl -f http://localhost:9090/-/healthy || echo "Prometheus not ready"
          kill $PROM_PID || true
          
          echo "Checking Grafana..."
          kubectl port-forward -n brrtrouter-dev service/grafana 3000:3000 &
          GRAF_PID=$!
          sleep 3
          curl -f http://localhost:3000/api/health || echo "Grafana not ready"
          kill $GRAF_PID || true
          
          echo "✅ Observability stack check complete"

      - name: Upload Tilt logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tilt-ci-logs
          retention-days: 3
          path: |
            ~/.tilt-dev/

      - name: Cleanup
        if: always()
        run: |
          tilt down || true
          kind delete cluster --name brrtrouter-ci || true

  e2e-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: "1"
      RUST_LOG: "debug"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build generator (ACT local)
        if: ${{ env.ACT }}
        run: cargo build --release --bin brrtrouter-gen

      - name: Download generator artifact
        if: ${{ !env.ACT }}
        uses: actions/download-artifact@v4
        with:
          name: brrtrouter-gen-linux
          path: ./dist

      - name: Install musl target (ACT local)
        if: ${{ env.ACT }}
        run: rustup target add x86_64-unknown-linux-musl

      - name: Install musl tools (ACT local)
        if: ${{ env.ACT }}
        run: sudo apt-get update || apt-get update && (sudo apt-get install -y musl-tools || apt-get install -y musl-tools)

      - name: Install cargo-zigbuild (for curl_integration_tests)
        run: cargo install cargo-zigbuild --locked

      - name: Build pet_store (musl, release) (ACT local)
        if: ${{ env.ACT }}
        env:
          CC_x86_64_unknown_linux_musl: musl-gcc
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
        run: cargo build --release -p pet_store --target x86_64-unknown-linux-musl

      - name: Download pet_store binary artifact
        if: ${{ !env.ACT }}
        uses: actions/download-artifact@v4
        with:
          name: pet_store-musl
          path: ./dist

      - name: Make generator executable
        run: chmod +x ./dist/brrtrouter-gen

      - name: Regenerate pet_store example (artifact)
        run: ./dist/brrtrouter-gen generate --spec examples/openapi.yaml --force

      - name: Regenerate pet_store example (ACT local)
        if: ${{ env.ACT }}
        run: ./target/release/brrtrouter-gen generate --spec examples/openapi.yaml --force

      - name: Build e2e Docker image (freshly generated app + provided binary)
        run: docker build --build-arg PETSTORE_BIN=/build/dist/pet_store --no-cache --rm --force-rm -t brrtrouter-petstore:e2e .

      - name: Build e2e Docker image (ACT local binary)
        if: ${{ env.ACT }}
        run: docker build --build-arg PETSTORE_BIN=/build/target/x86_64-unknown-linux-musl/release/pet_store --no-cache --rm --force-rm -t brrtrouter-petstore:e2e .

      - name: Install uuidgen
        run: sudo apt-get update && sudo apt-get install -y uuid-runtime

      - name: Tag and push ttl.sh ephemeral image
        id: ttl
        run: |
          IMAGE_NAME=$(uuidgen)
          IMAGE="ttl.sh/${IMAGE_NAME}:1h"
          echo "Tagging $IMAGE"
          docker tag brrtrouter-petstore:e2e "$IMAGE"
          docker push "$IMAGE"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Run e2e tests (docker integration)
        env:
          E2E_DOCKER: "1"
        run: cargo test --test docker_integration_tests -- --nocapture

      - name: Run HTTP integration tests
        run: cargo test --test curl_integration_tests -- --test-threads=1 --nocapture

      - name: Upload JUnit report
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: junit-e2e
          path: target/e2e/junit-e2e.xml
          retention-days: 1

    outputs:
      image: ${{ steps.ttl.outputs.image }}

  perf-wrk:
    needs: e2e-docker
    runs-on: ubuntu-latest
    services:
      petstore:
        image: ${{ needs.e2e-docker.outputs.image }}
        options: --name petstore
        ports:
          - 8080:8080
        env:
          # Enable jemalloc heap profiling in the service container
          MALLOC_CONF: prof:true,prof_active:true,prof_prefix:/tmp/jeprof,lg_prof_sample:20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install wrk
        run: sudo apt-get update && sudo apt-get install -y wrk curl

      - name: Install perf and FlameGraph tools
        run: |
          sudo apt-get update
          sudo apt-get install -y linux-tools-common linux-tools-generic linux-tools-$(uname -r) git perl
          git clone https://github.com/brendangregg/FlameGraph.git

      - name: Wait for readiness
        run: |
          for i in $(seq 1 120); do \
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/health || true); \
            [ "$code" = "200" ] && echo "ready" && break; \
            sleep 0.5; \
          done

      - name: Resolve service container PID
        id: svc
        run: |
          CID=$(docker ps --filter "name=^/petstore$" -q)
          echo "Container: $CID"
          PID=$(docker inspect -f '{{.State.Pid}}' "$CID")
          echo "pid=$PID" >> $GITHUB_OUTPUT

      - name: Start perf recording (background)
        run: |
          sudo sysctl kernel.perf_event_paranoid=1 || true
          sudo sysctl kernel.kptr_restrict=0 || true
          sudo perf record -F 99 -g -p ${{ steps.svc.outputs.pid }} -- sleep 70 &

      - name: Compute perf params (threads and connections)
        id: perf
        run: |
          CORES=$(nproc || getconf _NPROCESSORS_ONLN || echo 2)
          THREADS="$CORES"
          CONNS=$((CORES * 50))
          echo "Detected cores: $CORES; threads=$THREADS; connections=$CONNS"
          echo "threads=$THREADS" >> $GITHUB_OUTPUT
          echo "connections=$CONNS" >> $GITHUB_OUTPUT

      - name: wrk GET /health
        run: |
            wrk -t${{ steps.perf.outputs.threads }} -c${{ steps.perf.outputs.connections }} -d60s http://127.0.0.1:8080/health | tee wrk_health.txt

      - name: wrk GET /pets
        run: |
            wrk -t${{ steps.perf.outputs.threads }} -c${{ steps.perf.outputs.connections }} -d60s -H "X-API-Key: test123" http://127.0.0.1:8080/pets | tee wrk_pets.txt

      - name: Use repo post.lua if present
        id: postlua
        run: |
          if [ -f scripts/post.lua ]; then echo "path=scripts/post.lua" >> $GITHUB_OUTPUT; else echo "path=post.lua" >> $GITHUB_OUTPUT; fi

      - name: Create post.lua (fallback)
        if: steps.postlua.outputs.path == 'post.lua'
        run: |
          cat > post.lua <<'LUA'
          wrk.method = "POST"
          wrk.body   = '{"name":"Bella"}'
          wrk.headers["Content-Type"] = "application/json"
          wrk.headers["X-API-Key"]    = "test123"
          LUA

      - name: wrk POST /pets
        run: wrk -t${{ steps.perf.outputs.threads }} -c${{ steps.perf.outputs.connections }} -d60s -s ${{ steps.postlua.outputs.path }} http://127.0.0.1:8080/pets | tee wrk_pets_post.txt

      - name: Build flamegraph
        run: |
          sudo perf script | ./FlameGraph/stackcollapse-perf.pl > out.folded || true
          ./FlameGraph/flamegraph.pl out.folded > flame.svg || true

      - name: Copy jemalloc profiles from container
        run: |
          CID=$(docker ps --filter "name=^/petstore$" -q)
          mkdir -p jemalloc_profiles
          # Copy /tmp directory and extract jeprof files
          docker cp "$CID":/tmp jemalloc_tmp 2>/dev/null || true
          if ls jemalloc_tmp 1>/dev/null 2>&1; then
            find jemalloc_tmp -maxdepth 1 -type f -name 'jeprof.*' -exec mv {} jemalloc_profiles/ \; || true
          fi

      - name: Upload profiling artifacts
        uses: actions/upload-artifact@v4
        with:
          name: profiling-artifacts
          retention-days: 1
          path: |
            flame.svg
            out.folded
            jemalloc_profiles

      - name: Upload wrk artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wrk-results
          retention-days: 1
          path: |
            wrk_health.txt
            wrk_pets.txt
            wrk_pets_post.txt

  goose-load-test:
    needs: e2e-docker
    runs-on: ubuntu-latest
    services:
      petstore:
        image: ${{ needs.e2e-docker.outputs.image }}
        options: --name petstore
        ports:
          - 8080:8080
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Wait for service readiness
        run: |
          for i in $(seq 1 120); do \
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/health || true); \
            [ "$code" = "200" ] && echo "Service ready!" && break; \
            sleep 0.5; \
          done

      - name: Build Goose load test
        run: cargo build --release --example api_load_test

      - name: Run Goose comprehensive load test
        run: |
          echo "====================================================================="
          echo "GOOSE COMPREHENSIVE API LOAD TEST"
          echo "Testing ALL OpenAPI endpoints + static files"
          echo "This tests what wrk doesn't: authenticated endpoints, static files,"
          echo "and helps identify memory leaks under sustained load"
          echo "====================================================================="
          
          cargo run --release --example api_load_test -- \
            --host http://127.0.0.1:8080 \
            --users 20 \
            --hatch-rate 5 \
            --run-time 2m \
            --no-reset-metrics \
            --report-file goose-report.html \
            --report-file goose-report.json \
            | tee goose-metrics.txt
          
          echo "====================================================================="
          echo "LOAD TEST COMPLETE - Metrics saved to goose-metrics.txt"
          echo "====================================================================="

      - name: Check for failures in Goose metrics
        run: |
          echo "Checking Goose metrics for failures..."
          
          # Extract failure count from ASCII metrics
          if grep -q "Aggregated.*0 (0%)" goose-metrics.txt; then
            echo "✅ No failures detected in load test"
          else
            echo "⚠️  Some failures detected, see metrics for details"
            echo ""
            echo "Failure summary:"
            grep -A 2 "# fails" goose-metrics.txt || true
          fi

      - name: Extract key metrics for PR comments
        run: |
          echo "## 📊 Goose Load Test Results" > goose-summary.md
          echo "" >> goose-summary.md
          echo "Full metrics available in ASCII report artifact." >> goose-summary.md
          echo "" >> goose-summary.md
          
          # Extract actual aggregated metrics from Goose output
          if grep -q "All Transactions" goose-metrics.txt; then
            echo "### Summary Statistics" >> goose-summary.md
            echo "\`\`\`" >> goose-summary.md
            grep -A 10 "All Transactions" goose-metrics.txt >> goose-summary.md || echo "Could not extract summary" >> goose-summary.md
            echo "\`\`\`" >> goose-summary.md
          fi

      - name: Upload Goose ASCII metrics
        uses: actions/upload-artifact@v4
        with:
          name: goose-ascii-metrics
          retention-days: 7
          path: |
            goose-metrics.txt
            goose-summary.md

      - name: Upload Goose HTML report
        uses: actions/upload-artifact@v4
        with:
          name: goose-html-report
          retention-days: 7
          path: goose-report.html

      - name: Upload Goose JSON report
        uses: actions/upload-artifact@v4
        with:
          name: goose-json-report
          retention-days: 7
          path: goose-report.json

      - name: Display metrics summary
        run: |
          echo ""
          echo "====================================================================="
          echo "📊 GOOSE LOAD TEST SUMMARY"
          echo "====================================================================="
          cat goose-summary.md
          echo ""
          echo "Full metrics available in artifacts: goose-ascii-metrics"
          echo "HTML report available in artifacts: goose-html-report"
          echo "====================================================================="
