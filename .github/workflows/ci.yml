name: Test BRRTRouter

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      BRRTR_LOCAL: "1"
      RUST_BACKTRACE: "1"
      RUST_LOG: "debug"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Override Cargo config (disable zig linker)
        if: ${{ !env.ACT }}
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<'EOF'
          # Cargo configuration for BRRTRouter (CI override)
          
          [build]
          # Enable Mermaid diagram rendering in documentation
          rustdocflags = ["--html-in-header", "doc/head.html"]
          EOF

      - name: Cache cargo registry
        if: ${{ !env.ACT }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-v2-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-v2-

      - name: Install Just
        uses: extractions/setup-just@v3

      - name: Cargo build
        #run: cargo build --all --all-features # this will also build the example projects, which are currently broken
        run: cargo build

      - name: Generate handlers
        run: cargo run --bin brrtrouter-gen -- generate --spec examples/openapi.yaml --force

      - name: Cargo build again with handlers
        #run: cargo build --all --all-features # this will also build the example projects, which are currently broken
        run: cargo build

      - name: Build generator (release)
        run: cargo build --release --bin brrtrouter-gen

      - name: Upload generator artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: brrtrouter-gen-linux
          path: target/release/brrtrouter-gen
          retention-days: 1

      - name: Install musl target for pet_store
        run: rustup target add x86_64-unknown-linux-musl

      - name: Install musl tools (provides musl-gcc for ring)
        run: sudo apt-get update || apt-get update && (sudo apt-get install -y musl-tools || apt-get install -y musl-tools)

      # zigbuild not required on Linux runners; curl harness uses standard cargo build

      - name: Build pet_store (musl, release)
        env:
          CC_x86_64_unknown_linux_musl: musl-gcc
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
        run: cargo build --release -p pet_store --target x86_64-unknown-linux-musl

      - name: Upload pet_store binary artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: pet_store-musl
          path: target/x86_64-unknown-linux-musl/release/pet_store
          retention-days: 1

      - name: Lint with Clippy
        # run: cargo clippy --all-targets --all-features -- -D warnings || true - runs clippy on all targets and features, but fails the build on warnings
        run: cargo clippy -- -D warnings || true

      - name: Check documentation
        run: |
          echo "Checking for missing documentation and broken intra-doc links..."
          RUSTDOCFLAGS="-D warnings -D rustdoc::broken_intra_doc_links --html-in-header doc/head.html" cargo doc --no-deps --lib || true
          echo "Documentation check complete (warnings are informational only)"

      # Nextest provides faster, more reliable test execution
      # - Parallel test execution with better isolation
      # - Better output formatting and failure reporting
      # - Handles flaky tests better with retries
      # Tests are executed once via cargo-llvm-cov using nextest as the runner
      - name: Install nextest (prebuilt)
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Install cargo-llvm-cov
        if: ${{ !env.ACT }}
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Prepare test report output directory
        if: ${{ !env.ACT }}
        run: mkdir -p target/nextest

      - name: Measure coverage (runs tests via nextest)
        if: ${{ !env.ACT }}
        run: cargo llvm-cov nextest --workspace --all-targets --fail-fast

      - name: Upload JUnit report
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: junit-unit
          path: target/nextest/junit.xml
          retention-days: 7

  tilt-ci:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: "1"
      RUST_LOG: "info"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Override Cargo config (disable zig linker)
        if: ${{ !env.ACT }}
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<'EOF'
          # Cargo configuration for BRRTRouter (CI override)
          
          [build]
          # Enable Mermaid diagram rendering in documentation
          rustdocflags = ["--html-in-header", "doc/head.html"]
          EOF

      - name: Install musl target
        run: rustup target add x86_64-unknown-linux-musl

      - name: Install musl tools and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      # zigbuild is unnecessary for Linux-hosted Tilt CI; rely on musl-gcc builds

      - name: Start local registry for Kind (localhost:5001)
        run: |
          docker ps -a
          RUNNING=$(docker inspect -f '{{.State.Running}}' kind-registry 2>/dev/null || echo "false")
          if [ "$RUNNING" != "true" ]; then
            docker rm -f kind-registry 2>/dev/null || true
            docker run -d --restart=always -p 5001:5000 --name kind-registry registry:2
          fi

      - name: Create kind cluster (with local registry mirror)
        uses: helm/kind-action@v1
        with:
          cluster_name: brrtrouter-ci
          wait: 60s
          config: k8s/cluster/kind-config.yaml

      - name: Connect registry to kind network
        run: |
          docker network connect kind kind-registry 2>/dev/null || true
          kubectl get nodes
          kubectl get pods -A || true

      - name: Verify cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Tilt
        run: |
          curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
          tilt version

      - name: Build BRRTRouter and Pet Store binaries
        env:
          CC_x86_64_unknown_linux_musl: musl-gcc
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
        run: |
          cargo build --release --target x86_64-unknown-linux-musl
          cargo run --bin brrtrouter-gen -- generate --spec examples/openapi.yaml --force
          cargo build --release --target x86_64-unknown-linux-musl -p pet_store
          mkdir -p build_artifacts
          cp target/x86_64-unknown-linux-musl/release/pet_store build_artifacts/

      - name: Build sample UI (if exists)
        run: |
          if [ -d "sample-ui" ]; then
            cd sample-ui
            if command -v yarn &> /dev/null && [ -f "package.json" ]; then
              echo "Building sample UI with yarn..."
              yarn install
              yarn build:petstore || true
            fi
          fi

      - name: Run Tilt CI
        run: |
          echo "Starting Tilt CI - will build, deploy, and wait for services to be healthy"
          tilt ci --timeout 10m
        timeout-minutes: 12

      - name: Check deployment status
        if: always()
        run: |
          echo "=== Kubernetes Resources ==="
          kubectl get all -n brrtrouter-dev
          
          echo ""
          echo "=== Pet Store Logs ==="
          kubectl logs -n brrtrouter-dev deployment/petstore --tail=100 || true
          
          echo ""
          echo "=== OTEL Collector Logs ==="
          kubectl logs -n brrtrouter-dev deployment/otel-collector --tail=50 || true

      - name: Test Pet Store API
        run: |
          echo "Forwarding Pet Store port..."
          kubectl port-forward -n brrtrouter-dev service/petstore 8080:8080 &
          PF_PID=$!
          echo "Waiting for Pet Store readiness (/health 200)..."
          for i in $(seq 1 120); do \
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/health || true); \
            [ "$code" = "200" ] && echo "ready" && break; \
            sleep 1; \
          done
          
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health || (echo "Health check failed" && exit 1)
          
          echo "Testing metrics endpoint..."
          curl -f http://localhost:8080/metrics | grep brrtrouter || (echo "Metrics check failed" && exit 1)
          
          echo "Testing authenticated endpoint..."
          curl -f -H "X-API-Key: test123" http://localhost:8080/pets || (echo "Auth test failed" && exit 1)
          
          echo "Checking per-path metrics..."
          curl -f http://localhost:8080/metrics | grep brrtrouter_path_requests_total || (echo "Per-path metrics missing" && exit 1)
          
          kill $PF_PID || true
          
          echo "✅ All API tests passed!"

      - name: Test observability stack
        run: |
          echo "Checking Prometheus..."
          kubectl port-forward -n brrtrouter-dev service/prometheus 9090:9090 &
          PROM_PID=$!
          sleep 3
          curl -f http://localhost:9090/-/healthy || echo "Prometheus not ready"
          kill $PROM_PID || true
          
          echo "Checking Grafana..."
          kubectl port-forward -n brrtrouter-dev service/grafana 3000:3000 &
          GRAF_PID=$!
          sleep 3
          curl -f http://localhost:3000/api/health || echo "Grafana not ready"
          kill $GRAF_PID || true
          
          echo "✅ Observability stack check complete"

      - name: Build Goose load test
        run: cargo build --release --example api_load_test

      - name: Run Goose comprehensive load test (via Tilt cluster)
        run: |
          echo "Forwarding Pet Store port for Goose..."
          kubectl port-forward -n brrtrouter-dev service/petstore 8080:8080 &
          PF_PID=$!
          echo "Waiting for Pet Store readiness (/health 200) before Goose..."
          for i in $(seq 1 120); do \
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/health || true); \
            [ "$code" = "200" ] && echo "ready" && break; \
            sleep 1; \
          done

          echo "Sanity-checking secured endpoints before Goose (with X-API-Key)..."
          set -e
          curl -fsS -H "X-API-Key: test123" http://127.0.0.1:8080/pets >/dev/null
          curl -fsS -H "X-API-Key: test123" http://127.0.0.1:8080/users >/dev/null
          curl -fsS -H "X-API-Key: test123" http://127.0.0.1:8080/admin/settings >/dev/null || echo "admin/settings may require additional roles; continuing"
          set +e

          echo "====================================================================="
          echo "GOOSE COMPREHENSIVE API LOAD TEST"
          echo "Testing ALL OpenAPI endpoints + static files"
          echo "This tests what wrk doesn't: authenticated endpoints, static files,"
          echo "and helps identify memory leaks under sustained load"
          echo "====================================================================="

          cargo run --release --example api_load_test -- \
            --host http://127.0.0.1:8080 \
            --users 20 \
            --hatch-rate 5 \
            --run-time 2m \
            --no-reset-metrics \
            --report-file goose-report.html \
            --report-file goose-report.json \
            | tee goose-metrics.txt

          kill $PF_PID || true

      - name: Diagnose auth failures (Loki-style log grep)
        if: always()
        run: |
          echo "Checking for 401/unauth logs from petstore..."
          kubectl logs -n brrtrouter-dev deployment/petstore --tail=400 | grep -Ei "unauth|401" || echo "No auth errors detected in recent logs"

      - name: Check for failures in Goose metrics
        run: |
          echo "Checking Goose metrics for failures..."
          if grep -q "Aggregated.*0 (0%)" goose-metrics.txt; then
            echo "✅ No failures detected in load test"
          else
            echo "⚠️  Some failures detected, see metrics for details"
            echo ""
            echo "Failure summary:"
            grep -A 2 "# fails" goose-metrics.txt || true
          fi

      - name: Extract key metrics for PR comments
        run: |
          echo "## 📊 Goose Load Test Results" > goose-summary.md
          echo "" >> goose-summary.md
          echo "Full metrics available in ASCII report artifact." >> goose-summary.md
          echo "" >> goose-summary.md
          if grep -q "All Transactions" goose-metrics.txt; then
            echo "### Summary Statistics" >> goose-summary.md
            echo "\`\`\`" >> goose-summary.md
            grep -A 10 "All Transactions" goose-metrics.txt >> goose-summary.md || echo "Could not extract summary" >> goose-summary.md
            echo "\`\`\`" >> goose-summary.md
          fi

      - name: Upload Goose ASCII metrics
        uses: actions/upload-artifact@v4
        with:
          name: goose-ascii-metrics
          retention-days: 7
          path: |
            goose-metrics.txt
            goose-summary.md

      - name: Upload Goose HTML report
        uses: actions/upload-artifact@v4
        with:
          name: goose-html-report
          retention-days: 7
          path: goose-report.html

      - name: Upload Goose JSON report
        uses: actions/upload-artifact@v4
        with:
          name: goose-json-report
          retention-days: 7
          path: goose-report.json

      - name: Upload Tilt logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tilt-ci-logs
          retention-days: 3
          path: |
            ~/.tilt-dev/

      - name: Cleanup
        if: always()
        run: |
          tilt down || true
          kind delete cluster --name brrtrouter-ci || true
          docker rm -f kind-registry || true

