// Auto-generated by BRRTRouter
use crate::brrtrouter::dispatcher::HandlerRequest;
use crate::brrtrouter::typed::TypedHandlerRequest;
use crate::handlers::types::Post;
use serde::{Deserialize, Serialize};
use std::convert::TryFrom;

#[derive(Debug, Deserialize, Serialize)]
pub struct Request {
    #[serde(rename = "user_id")]
    pub user_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "limit")]
    pub limit: Option<i32>,

    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(rename = "offset")]
    pub offset: Option<i32>,
}

#[derive(Debug, Serialize)]

pub struct Response(pub Vec<Post>);

impl TryFrom<HandlerRequest> for Request {
    type Error = anyhow::Error;

    fn try_from(req: HandlerRequest) -> Result<Self, Self::Error> {
        use serde_json::{Map, Value};

        let mut data_map = Map::new();

        if let Some(v) = req.path_params.get("user_id") {
            data_map.insert(
                "user_id".to_string(),
                crate::brrtrouter::server::request::decode_param_value(
                    v,
                    Some(&serde_json::json!({"type":"string"})),
                    None,
                    None,
                ),
            );
        } else {
            return Err(anyhow::anyhow!("Missing required parameter 'user_id'"));
        }

        if let Some(v) = req.query_params.get("limit") {
            data_map.insert(
                "limit".to_string(),
                crate::brrtrouter::server::request::decode_param_value(
                    v,Some(&serde_json::json!({"default":20,"maximum":100,"minimum":0,"type":"integer"})),None,None,
                ),
            );
        } else {

            // optional parameter
        }

        if let Some(v) = req.query_params.get("offset") {
            data_map.insert(
                "offset".to_string(),
                crate::brrtrouter::server::request::decode_param_value(
                    v,
                    Some(&serde_json::json!({"default":0,"minimum":0,"type":"integer"})),
                    None,
                    None,
                ),
            );
        } else {

            // optional parameter
        }

        if let Some(body) = req.body {
            match body {
                Value::Object(map) => {
                    for (k, v) in map {
                        data_map.insert(k, v);
                    }
                }
                other => {
                    data_map.insert("body".to_string(), other);
                }
            }
        }

        Ok(serde_json::from_value(Value::Object(data_map))?)
    }
}

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::list_user_posts::handle(req)
}
