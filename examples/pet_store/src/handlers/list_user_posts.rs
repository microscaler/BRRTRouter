
// Auto-generated by BRRTRouter

use serde::{ Deserialize, Serialize };
use serde_json::Value;
use crate::brrtrouter::dispatcher::HandlerRequest;
use crate::brrtrouter::typed::{ TypedHandlerRequest, TypedHandlerResponse, TypedHandlerFor };

use crate::handlers::types::Post;
#[derive(Debug, Deserialize)]
pub struct Request {
    }

#[derive(Debug, Serialize)]
pub struct Response {
    pub items: Vec<Post>,
    
    }

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::list_user_posts::handle(req)
}

impl TypedHandlerFor<Request> for Request {
    fn from_handler(req: HandlerRequest) -> TypedHandlerRequest<Self> {
        // fill from req.body, req.path_params, etc
        unimplemented!()
    }

    fn into_handler(self) -> HandlerRequest {
        unimplemented!()
    }
}

/// Custom trait to convert from typed request back to HandlerRequest
pub trait FromTypedRequest {
    fn from_typed_request(typed_req: TypedHandlerRequest<Request>) -> Self;
}

impl FromTypedRequest for HandlerRequest {
    fn from_typed_request(typed_req: TypedHandlerRequest<Request>) -> Self {
        // TODO: convert TypedHandlerRequest<Request> to HandlerRequest
        unimplemented!()
    }
}