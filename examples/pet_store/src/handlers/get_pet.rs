
// Auto-generated by BRRTRouter

use serde::{ Deserialize, Serialize };
use serde_json::Value;
use crate::brrtrouter::dispatcher::HandlerRequest;
use crate::brrtrouter::typed::{ TypedHandlerRequest, TypedHandlerResponse };

#[derive(Debug, Deserialize)]
pub struct Request {
    }

#[derive(Debug, Serialize)]
pub struct Response {
    pub age: i32,
    
    pub breed: String,
    
    pub id: i32,
    
    pub name: String,
    
    pub tags: Vec<serde_json::Value>,
    
    pub vaccinated: bool,
    
    }

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::get_pet::handle(req)
}

pub trait IntoTypedRequest {
    fn into_typed_request(self) -> TypedHandlerRequest<Request>;
}

impl IntoTypedRequest for HandlerRequest {
    fn into_typed_request(self) -> TypedHandlerRequest<Request> {
        // TODO: convert HandlerRequest to TypedHandlerRequest<Request>
        unimplemented!()
    }
}

/// Custom trait to convert from typed request back to HandlerRequest
pub trait FromTypedRequest {
    fn from_typed_request(typed_req: TypedHandlerRequest<Request>) -> Self;
}

impl FromTypedRequest for HandlerRequest {
    fn from_typed_request(typed_req: TypedHandlerRequest<Request>) -> Self {
        // TODO: convert TypedHandlerRequest<Request> to HandlerRequest
        unimplemented!()
    }
}