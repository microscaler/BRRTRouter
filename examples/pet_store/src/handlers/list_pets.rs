
// Auto-generated by BRRTRouter
use serde::{Deserialize, Serialize};
use crate::brrtrouter::typed::TypedHandlerRequest;
use crate::brrtrouter::dispatcher::HandlerRequest;
use crate::brrtrouter::server::request::decode_param_value;
use crate::brrtrouter::spec::ParameterStyle;
use anyhow::anyhow;
use std::convert::TryFrom;
use crate::handlers::types::Pet;


#[derive(Debug, Deserialize, Serialize)]
pub struct Request {
    }

#[derive(Debug, Serialize)]

pub struct Response {
    pub items: Vec<Pet>,
    
    }


impl TryFrom<HandlerRequest> for Request {
    type Error = anyhow::Error;

    fn try_from(req: HandlerRequest) -> Result<Self, Self::Error> {
        use serde_json::{Map, Value};

        let mut data_map = Map::new();

        

        if let Some(body) = req.body {
            match body {
                Value::Object(map) => {
                    for (k, v) in map { data_map.insert(k, v); }
                }
                other => {
                    data_map.insert("body".to_string(), other);
                }
            }
        }

        Ok(serde_json::from_value(Value::Object(data_map))?)
    }
}

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::list_pets::handle(req)
}
