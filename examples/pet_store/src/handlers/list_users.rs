
// Auto-generated by BRRTRouter
use serde::{Deserialize, Serialize};
use crate::brrtrouter::typed::TypedHandlerRequest;
use crate::brrtrouter::dispatcher::HandlerRequest;
use anyhow::anyhow;
use std::convert::TryFrom;
use crate::handlers::types::User;


#[derive(Debug, Deserialize, Serialize)]
pub struct Request {
    }

#[derive(Debug, Serialize)]
pub struct Response {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<User>>,
    
    }

impl TryFrom<HandlerRequest> for Request {
    type Error = anyhow::Error;

    fn try_from(req: HandlerRequest) -> Result<Self, Self::Error> {
        use serde_json::{Map, Value};

        fn convert(value: &str, schema: Option<&Value>) -> Value {
            if let Some(ty) = schema.and_then(|s| s.get("type").and_then(|v| v.as_str())) {
                match ty {
                    "integer" => value
                        .parse::<i64>()
                        .map(Value::from)
                        .unwrap_or_else(|_| Value::String(value.to_string())),
                    "number" => value
                        .parse::<f64>()
                        .map(Value::from)
                        .unwrap_or_else(|_| Value::String(value.to_string())),
                    "boolean" => value
                        .parse::<bool>()
                        .map(Value::from)
                        .unwrap_or_else(|_| Value::String(value.to_string())),
                    _ => Value::String(value.to_string()),
                }
            } else {
                Value::String(value.to_string())
            }
        }

        let mut data_map = Map::new();

        

        if let Some(body) = req.body {
            match body {
                Value::Object(map) => {
                    for (k, v) in map { data_map.insert(k, v); }
                }
                other => {
                    data_map.insert("body".to_string(), other);
                }
            }
        }

        Ok(serde_json::from_value(Value::Object(data_map))?)
    }
}

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::list_users::handle(req)
}
