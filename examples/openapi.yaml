openapi: 3.1.0
info:
  title: Pet Store
  version: "1.0.0"
  description: |
    Sample Pet Store API used to generate example services.
    Includes pets, users, posts, items, admin settings, and SSE.

servers:
  - url: http://localhost:8080
    description: Local dev server
  - url: https://api.example.com
    description: Production server (mock)

paths:
  /pets:
    get:
      summary: List pets
      operationId: list_pets
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/TagsParam'
      responses:
        "200":
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
              examples:
                petListExample:
                  summary: Example list of pets
                  value:
                    - id: 12345
                      name: "Max"
                      breed: "Golden Retriever"
                      age: 3
                      vaccinated: true
                      tags: ["friendly", "trained"]
                    - id: 67890
                      name: "Bella"
                      breed: "Labrador"
                      age: 2
                      vaccinated: true
                      tags: ["puppy", "playful"]
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    post:
      summary: Add a pet
      operationId: add_pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePetRequest"
            examples:
              createPetExample:
                summary: Example pet creation request
                value:
                  name: "Bella"
      responses:
        "200":
          description: Pet added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetCreationResponse"
              examples:
                addPetExample:
                  summary: Example response
                  value:
                    id: 67890
                    status: "success"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /pets/{id}:
    get:
      summary: Get a specific pet
      operationId: get_pet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A pet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
              examples:
                petExample:
                  summary: A pet
                  value:
                    id: 12345
                    name: "Max"
                    breed: "Golden Retriever"
                    age: 3
                    vaccinated: true
                    tags: ["friendly", "trained"]
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /users:
    get:
      summary: List users
      operationId: list_users
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
              examples:
                userListExample:
                  summary: List of users
                  value:
                    users:
                      - id: "abc-123"
                        name: "John"
                        email: "john@example.com"
                      - id: "def-456"
                        name: "Jane"
                        email: "jane@example.com"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /users/{user_id}:
    get:
      summary: Get user by ID
      operationId: get_user
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                userExample:
                  summary: User
                  value:
                    id: "abc-123"
                    name: "John"
                    email: "john@example.com"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      links:
        UserPosts:
          operationId: list_user_posts
          parameters:
            user_id: '$response.body#/id'
    delete:
      summary: Delete user
      operationId: delete_user
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: Deleted }
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    head:
      summary: Check user exists
      operationId: head_user
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists: { type: boolean }
              examples:
                exists:
                  value: { exists: true }
        "404": { description: Not found }
    options:
      summary: Allowed operations
      operationId: options_user
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: OK
          headers:
            Allow:
              schema: { type: string }
        "200":
          description: Allowed operations
          content:
            application/json:
              schema:
                type: object
                properties:
                  allow: { type: string }
              examples:
                allow:
                  value: { allow: "GET,HEAD,OPTIONS" }

  /users/{user_id}/posts:
    get:
      summary: List posts by user
      operationId: list_user_posts
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
              examples:
                postsExample:
                  summary: User posts
                  value:
                    - id: "post1"
                      title: "Intro"
                      body: "Welcome to the blog"
                      author_id: "abc-123"
                    - id: "post2"
                      title: "Follow-up"
                      body: "Thanks for reading"
                      author_id: "abc-123"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /users/{user_id}/posts/{post_id}:
    get:
      summary: Get specific post
      operationId: get_post
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string }
        - name: post_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
              examples:
                postExample:
                  summary: A blog post
                  value:
                    id: "post1"
                    title: "Intro"
                    body: "Welcome to the blog"
                    author_id: "abc-123"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /admin/settings:
    get:
      summary: Admin settings
      operationId: admin_settings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminSettings"
              examples:
                settingsExample:
                  summary: Admin settings
                  value:
                    feature_flags:
                      beta: true
                      analytics: false
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /items/{id}:
    get:
      operationId: get_item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Get an item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
              examples:
                itemExample:
                  value:
                    id: "item-001"
                    name: "Sample Item"

    post:
      summary: Update or create item by ID
      operationId: post_item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItemRequest"
      responses:
        "200":
          description: Upserted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
              examples:
                itemExample:
                  value:
                    id: "item-001"
                    name: "New Item"
        "201":
          description: Created
          headers:
            Location:
              description: URI of the created resource
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /events:
    get:
      summary: Example event stream
      operationId: stream_events
      x-sse: true
      responses:
        "200":
          description: Stream of events
          content:
            text/event-stream: {}

  /download/{id}:
    get:
      summary: Download file
      operationId: download_file
      servers:
        - url: https://cdn.example.com
          description: CDN server
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Binary file
          content:
            image/png: { schema: { type: string, format: binary } }
            application/octet-stream: { schema: { type: string, format: binary } }
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  url: { type: string, format: uri }
              examples:
                meta:
                  value: { id: "abc", url: "https://cdn.example.com/abc" }

  /form:
    post:
      summary: Submit form
      operationId: submit_form
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                age: { type: integer, format: int32 }
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
              examples:
                formAccepted:
                  value: { ok: true }

  /upload:
    post:
      summary: Upload file
      operationId: upload_file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file: { type: string, format: binary }
                metadata:
                  type: object
                  additionalProperties: { type: string }
      responses:
        "201":
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  location: { type: string, format: uri }
              examples:
                uploadOk:
                  value: { location: "https://cdn.example.com/files/abc.png" }
          headers:
            Location:
              schema: { type: string, format: uri }

  /matrix/{coords}:
    get:
      summary: Matrix-style path parameter
      operationId: get_matrix
      parameters:
        - name: coords
          in: path
          required: true
          style: matrix
          explode: false
          schema: { type: array, items: { type: integer } }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coords: { type: array, items: { type: integer } }
              examples:
                example:
                  value: { coords: [1,2,3] }

  /labels/{color}:
    get:
      summary: Label-style path parameter
      operationId: get_label
      parameters:
        - name: color
          in: path
          required: true
          style: label
          explode: false
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  color: { type: string }
              examples:
                example:
                  value: { color: "red" }

  /search:
    get:
      summary: Complex query parameters
      operationId: search
      parameters:
        - name: tags
          in: query
          style: pipeDelimited
          explode: false
          schema: { type: array, items: { type: string } }
        - name: filters
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: { type: string }
        - name: X-Trace-Id
          in: header
          schema: { type: string, format: uuid }
        - name: session
          in: cookie
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results: { type: array, items: { $ref: '#/components/schemas/Item' } }
              examples:
                searchExample:
                  summary: Search results
                  value:
                    results:
                      - id: "item-001"
                        name: "Sample Item"
                      - id: "item-002"
                        name: "Another Item"

  /secure:
    get:
      summary: Protected endpoint
      operationId: secure_endpoint
      security:
        - BearerAuth: []
        - OAuth2: [read]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
              examples:
                ok:
                  value: { status: "ok" }
        "401": { description: Unauthorized }

  /webhooks:
    post:
      summary: Register webhook
      operationId: register_webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url: { type: string, format: uri }
      callbacks:
        onEvent:
          '{$request.body#/url}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      required: [event]
                      properties:
                        event: { type: string, enum: [pet.created, pet.updated] }
                        payload: { type: object }
              responses:
                "200": { description: Received }
      responses:
        "201":
          description: Registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription_id: { type: string }
                  url: { type: string, format: uri }
              examples:
                webhookRegistered:
                  value:
                    subscription_id: "sub_123"
                    url: "https://example.com/webhook"

components:
  securitySchemes:
    ApiKeyHeader: { type: apiKey, in: header, name: X-API-Key }
    ApiKeyQuery: { type: apiKey, in: query, name: api_key }
    ApiKeyCookie: { type: apiKey, in: cookie, name: session }
    BearerAuth: { type: http, scheme: bearer }
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/auth
          tokenUrl: https://example.com/token
          scopes: { read: Read access, write: Write access }
  schemas:
    Pet:
      type: object
      required: [id, name, breed, age, vaccinated, tags]
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        breed: { type: string, enum: [Golden Retriever, Labrador, Bulldog, Poodle] }
        age: { type: integer }
        vaccinated: { type: boolean }
        tags:
          type: array
          items: { type: string }

    PetCreationResponse:
      type: object
      properties:
        id: { type: integer }
        status: { type: string }

    CreatePetRequest:
      type: object
      required: [name]
      properties:
        name: { type: string }

    UserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"

    User:
      type: object
      required: [id, name]
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email:
          oneOf:
            - type: string
              format: email
            - type: 'null'

    Post:
      type: object
      required: [id, title, body]
      properties:
        id: { type: string }
        title: { type: string }
        body: { type: string }
        author_id: { type: string }
    Animal:
      oneOf:
        - $ref: '#/components/schemas/Dog'
        - $ref: '#/components/schemas/Cat'
      discriminator:
        propertyName: type
        mapping:
          dog: '#/components/schemas/Dog'
          cat: '#/components/schemas/Cat'
    Dog:
      type: object
      required: [type, bark]
      properties:
        type: { const: dog }
        bark: { type: boolean }
    Cat:
      type: object
      required: [type, meow]
      properties:
        type: { const: cat }
        meow: { type: boolean }

    AdminSettings:
      type: object
      properties:
        feature_flags:
          type: object
          additionalProperties: { type: boolean }

    Item:
      type: object
      properties:
        id: { type: string }
        name: { type: string }

    CreateItemRequest:
      type: object
      properties:
        name: { type: string }

    ProblemDetails:
      type: object
      properties:
        type: { type: string }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        errors:
          type: array
          items: { type: string }

  parameters:
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 100
        default: 20
      description: Page size limit
    OffsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Pagination offset
    TagsParam:
      name: tags
      in: query
      style: form
      explode: true
      schema:
        type: array
        items: { type: string }
      description: Filter pets by tags

security:
  - ApiKeyHeader: []

tags:
  - name: pets
  - name: users
  - name: posts
  - name: items
  - name: admin
  - name: util

externalDocs:
  description: API guide
  url: https://example.com/docs
