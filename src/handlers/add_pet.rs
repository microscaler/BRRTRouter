
// Auto-generated by BRRTRouter

use serde::{ Deserialize, Serialize };
use serde_json::Value;
use crate::dispatcher::HandlerRequest;
use crate::typed::{ TypedHandlerRequest, TypedHandlerResponse };

#[derive(Debug, Deserialize)]
pub struct Request {
    
    pub name: String,
    
    
}

#[derive(Debug, Serialize)]
pub struct Response {
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    
    
}

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::add_pet::handle(req)
}

impl From<HandlerRequest> for TypedHandlerRequest<Request> {
    fn from(_req: HandlerRequest) -> Self {
        // TODO: convert HandlerRequest to TypedHandlerRequest<Request>
        unimplemented!()
    }
}

impl From<TypedHandlerRequest<Request>> for HandlerRequest {
    fn from(_req: TypedHandlerRequest<Request>) -> Self {
        // TODO: convert TypedHandlerRequest<Request> to HandlerRequest
        unimplemented!()
    }
}