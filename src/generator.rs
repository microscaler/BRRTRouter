// generator.rs
use crate::spec::load_spec;
use std::fs;
use std::path::{Path, PathBuf};
use std::io::Write;
use std::collections::HashSet;
use std::fs::OpenOptions;

pub fn generate_handlers_from_spec(spec_path: &Path, out_dir: &Path, force: bool) -> anyhow::Result<()> {
    println!("üì¶ Generating handlers from spec: {:?}", spec_path);

    let routes = load_spec(spec_path.to_str().unwrap(), false)?;
    fs::create_dir_all(out_dir)?;
    let controller_dir = Path::new("src/controllers");
    fs::create_dir_all(controller_dir)?;

    let mut seen = HashSet::new();
    let mut mod_lines_handlers = Vec::new();
    let mut mod_lines_controllers = Vec::new();
    let mut registry_lines = Vec::new();

    for route in routes {
        let handler = route.handler_name;
        if !seen.insert(handler.clone()) {
            continue;
        }

        let file_path = out_dir.join(format!("{}.rs", handler));
        if file_path.exists() && !force {
            println!("‚ö†Ô∏è  Skipping existing handler file: {:?}", file_path);
        } else {
            let mut file = fs::File::create(&file_path)?;
            writeln!(file, "// Auto-generated by BRRTRouter\n")?;
            writeln!(file, "use serde::{{Deserialize, Serialize}};")?;
            writeln!(file, "use crate::dispatcher::HandlerRequest;")?;
            writeln!(file, "use crate::handlers;")?;
            writeln!(file, "use crate::typed::{{TypedHandlerRequest, TypedHandlerResponse}};")?;
            writeln!(file, "")?;
            writeln!(file, "#[derive(Debug, Deserialize)]")?;
            writeln!(file, "pub struct Request {{\n    // TODO: fill in fields based on schema\n}}\n")?;
            writeln!(file, "#[derive(Debug, Serialize)]")?;
            writeln!(file, "pub struct Response {{\n    // TODO: fill in fields based on schema\n}}\n")?;
            writeln!(file, "pub fn handler(req: TypedHandlerRequest<Request>) -> Response {{")?;
            writeln!(file, "    crate::controllers::{}::handle(req)", handler)?;
            writeln!(file, "}}\n")?;
            writeln!(file, "impl From<HandlerRequest> for TypedHandlerRequest<Request> {{")?;
            writeln!(file, "    fn from(_req: HandlerRequest) -> Self {{")?;
            writeln!(file, "        // TODO: convert HandlerRequest to TypedHandlerRequest<Request>")?;
            writeln!(file, "        unimplemented!()")?;
            writeln!(file, "    }}")?;
            writeln!(file, "}}\n")?;
            writeln!(file, "impl From<TypedHandlerRequest<Request>> for HandlerRequest {{")?;
            writeln!(file, "    fn from(_req: TypedHandlerRequest<Request>) -> Self {{")?;
            writeln!(file, "        // TODO: convert TypedHandlerRequest<Request> to HandlerRequest")?;
            writeln!(file, "        unimplemented!()")?;
            writeln!(file, "    }}")?;
            writeln!(file, "}}")?;
            println!("‚úÖ Generated handler: {} ‚Üí {:?}", handler, file_path);
        }

        let controller_path = controller_dir.join(format!("{}.rs", handler));
        if controller_path.exists() && !force {
            println!("‚ö†Ô∏è  Skipping existing controller file: {:?}", controller_path);
        } else {
            let mut file = fs::File::create(&controller_path)?;
            writeln!(file, "// User-owned controller for handler '{}'.\n", handler)?;
            writeln!(file, "use crate::typed::TypedHandlerRequest;")?;
            writeln!(file, "use crate::handlers::{}::{{Request, Response}};\n", handler)?;
            writeln!(file, "pub fn handle(req: TypedHandlerRequest<Request>) -> Response {{")?;
            writeln!(file, "    // TODO: implement logic for '{}'.\n    Response {{ }}", handler)?;
            writeln!(file, "}}")?;
            println!("‚úÖ Generated controller: {} ‚Üí {:?}", handler, controller_path);
        }

        mod_lines_handlers.push(format!("pub mod {};", handler));
        mod_lines_controllers.push(format!("pub mod {};", handler));
        registry_lines.push(format!(
            "    dispatcher.register_handler(\"{}\", |req| {{ {}::handler(req.into()); }});",
            handler, handler
        ));
    }

    // Write mod.rs for handlers
    let mod_rs_handlers = out_dir.join("mod.rs");
    let mut file = fs::File::create(&mod_rs_handlers)?;
    for line in &mod_lines_handlers {
        writeln!(file, "{}", line)?;
    }
    println!("‚úÖ Updated mod.rs for handlers ‚Üí {:?}", mod_rs_handlers);

    // Write mod.rs for controllers
    let mod_rs_controllers = controller_dir.join("mod.rs");
    let mut file = fs::File::create(&mod_rs_controllers)?;
    for line in &mod_lines_controllers {
        writeln!(file, "{}", line)?;
    }
    println!("‚úÖ Updated mod.rs for controllers ‚Üí {:?}", mod_rs_controllers);

    // Write dispatcher registry stub
    let registry_path = Path::new("src/registry.rs");
    let mut file = fs::File::create(&registry_path)?;
    writeln!(file, "// Auto-generated handler registry\n")?;
    writeln!(file, "use crate::dispatcher::Dispatcher;")?;
    writeln!(file, "use crate::handlers::*;\n")?;
    writeln!(file, "pub unsafe fn register_all(dispatcher: &mut Dispatcher) {{")?;
    for line in &registry_lines {
        writeln!(file, "{}", line)?;
    }
    writeln!(file, "}}")?;
    println!("‚úÖ Generated registry.rs with {} handlers ‚Üí {:?}", registry_lines.len(), registry_path);

    Ok(())
}
