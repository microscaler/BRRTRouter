[package]
name = "brrtrouter"
version = "0.1.0-alpha.1"
edition = "2021"
authors = ["Charles Sibbald <casibbald@gmail.com>"]
description = "A blazing-fast, OpenAPI 3.1 driven Rust request router powered by coroutines and may_minihttp."
license = "MIT OR Apache-2.0"
repository = "https://github.com/microscaler/brrtrouter"
keywords = ["router", "openapi", "a10", "coroutine", "may"]
categories = ["web-programming", "api-bindings", "asynchronous"]
readme = "README.md"
exclude = [".github/"]

[package.metadata.docs.rs]
# Enable Mermaid diagram rendering in docs.rs
rustdoc-args = ["--html-in-header", "doc/head.html"]
# Build all features for comprehensive documentation
all-features = true
# Use nightly for better documentation features
# rustc-args = ["--cfg", "docsrs"]
# Build only the library docs (not binaries)
default-target = "x86_64-unknown-linux-gnu"

[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
jsonschema = "0.17"
serde_yaml = "0.9"
# Needed for simple JWT parsing in security providers
base64 = "0.22"
# Do not update to newer version
oas3 = { version = "0.16.1", features = ["yaml-spec"] }
anyhow = "1.0"
http = "1.0"  # Do not update to newer version, it that is not compatible with may_minihttp
may = "0.3"
# Using our fork until PR #21 is merged upstream
may_minihttp = { git = "https://github.com/microscaler/may_minihttp.git", branch = "feat/configurable-max-headers" }
regex = "1.11.1"
url = "2.5.4"
clap = { version = "4.5.38", features = ["cargo", "env", "derive"] }
askama = { version = "0.14.0", features = ["full"] }
notify = "6"
minijinja = "1"

# OpenTelemetry observability (PROVEN VERSIONS from obsctl)
# CRITICAL: These versions work with otel-collector-contrib:0.93.0
# DO NOT UPDATE without testing against OTEL collector!
tracing = "0.1"
opentelemetry = { version = "0.30", features = ["metrics", "trace"] }
opentelemetry-otlp = { version = "0.30", features = ["grpc-tonic", "metrics", "trace"] }
opentelemetry_sdk = { version = "0.30", features = ["metrics", "trace"] }
opentelemetry-semantic-conventions = "0.30"
tracing-opentelemetry = "0.31"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
tracing-appender = "0.2"

# gRPC dependencies for OTLP (compatible with opentelemetry 0.30)
tonic = "0.12"
prost = "0.13"
tokio = { version = "1.45.1", features = ["rt-multi-thread", "macros"] }

# Production JWT/JWKS validation and HTTP fetch (for external providers like PropelAuth)
jsonwebtoken = "9"
reqwest = { version = "0.11", default-features = false, features = ["json", "rustls-tls", "blocking"] }



[dev-dependencies]
pet_store = { path = "./examples/pet_store" }
criterion = "0.5"
# Using our own OTLP test utilities compatible with opentelemetry 0.30
# (fake-opentelemetry-collector 0.28 is incompatible - uses 0.29)
flamegraph = "0.6"
tempfile = "3.8"
bollard = { version = "0.16", default-features = false, features = ["ssl", "chrono"] }
tar = "0.4"
walkdir = "2"
futures-util = "0.3"
futures = "0.3"
once_cell = "1"
goose = "0.18.1"  # Load testing framework for static sites and APIs
parking_lot = "0.12"  # For RwLock in test utilities
libc = "0.2"  # For signal handling in tests (SIGINT cleanup)

[[bin]]
name = "brrtrouter-gen"
path = "src/bin/brrtrouter_gen.rs"

[[bench]]
name = "throughput"
harness = false

[features]
default = []
stack_usage = []

[workspace]
members = [
    "brrtrouter_macros",
    "examples/pet_store"
]

[profile.release]
# Ensure optimized, compatible with musl when building with target=x86_64-unknown-linux-musl
lto = true
codegen-units = 1
panic = "abort"
strip = true
