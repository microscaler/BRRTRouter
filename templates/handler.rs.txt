{# handler.rs.txt - Askama template #}
// Auto-generated by BRRTRouter

use serde::{ Deserialize, Serialize };
use crate::dispatcher::HandlerRequest;
use crate::handlers::*;
use crate::typed::{ TypedHandlerRequest, TypedHandlerResponse };

#[derive(Debug, Deserialize)]
pub struct Request {
    {% for field in request_fields %}
    {% if field.optional %}#[serde(skip_serializing_if = "Option::is_none")] {% endif %}
    pub {{ field.name }}: {{ field.ty }},
    {% endfor %}
}

#[derive(Debug, Serialize)]
pub struct Response {
    {% for field in response_fields %}
    {% if field.optional %}#[serde(skip_serializing_if = "Option::is_none")] {% endif %}
    pub {{ field.name }}: {{ field.ty }},
    {% endfor %}
}

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::{{ handler_name }}::handle(req)
}

impl From<HandlerRequest> for TypedHandlerRequest<Request> {
    fn from(_req: HandlerRequest) -> Self {
        // TODO: convert HandlerRequest to TypedHandlerRequest<Request>
        unimplemented!()
    }
}

impl From<TypedHandlerRequest<Request>> for HandlerRequest {
    fn from(_req: TypedHandlerRequest<Request>) -> Self {
        // TODO: convert TypedHandlerRequest<Request> to HandlerRequest
        unimplemented!()
    }
}
