{# handler.rs.txt - Askama template #}
// Auto-generated by BRRTRouter
use serde::{Deserialize, Serialize};
use crate::brrtrouter::typed::TypedHandlerRequest;
use crate::brrtrouter::dispatcher::HandlerRequest;
use crate::brrtrouter::server::request::decode_param_value;
use crate::brrtrouter::spec::ParameterStyle;
use anyhow::anyhow;
use std::convert::TryFrom;
{% for import in imports -%}
use crate::handlers::types::{{ import }};
{% endfor %}

#[derive(Debug, Deserialize, Serialize)]
pub struct Request {
    {% for field in request_fields -%}
    {% if field.optional %}#[serde(skip_serializing_if = "Option::is_none")]
    pub {{ field.name }}: Option<{{ field.ty }}>,
    {% else %}pub {{ field.name }}: {{ field.ty }},
    {% endif %}
    {% endfor -%}
}

#[derive(Debug, Serialize)]
{% if sse %}
pub struct Response(pub String);
{% else %}
pub struct Response {
    {% for field in response_fields -%}
    {% if field.optional %}#[serde(skip_serializing_if = "Option::is_none")]
    pub {{ field.name }}: Option<{{ field.ty }}>,
    {% else %}pub {{ field.name }}: {{ field.ty }},
    {% endif %}
    {% endfor -%}
}
{% endif %}

impl TryFrom<HandlerRequest> for Request {
    type Error = anyhow::Error;

    fn try_from(req: HandlerRequest) -> Result<Self, Self::Error> {
        use serde_json::{Map, Value};

        let mut data_map = Map::new();

        {% for p in parameters %}
        {% if p.location == crate::spec::ParameterLocation::Path %}
        if let Some(v) = req.path_params.get("{{ p.name }}") {
        {% elif p.location == crate::spec::ParameterLocation::Query %}
        if let Some(v) = req.query_params.get("{{ p.name }}") {
        {% elif p.location == crate::spec::ParameterLocation::Header %}
        if let Some(v) = req.headers.get("{{ p.name | lower }}") {
        {% else %}
        if let Some(v) = req.cookies.get("{{ p.name }}") {
        {% endif %}
            data_map.insert(
                "{{ p.name }}".to_string(),
                decode_param_value(
                    v,
                    {%- if p.schema.is_some() %}Some(&serde_json::json!({{ p.schema | json }})){%- else %}None{%- endif %},
                    {%- if p.style.is_some() %}Some(ParameterStyle::{{ p.style.as_ref().unwrap() }} ){%- else %}None{%- endif %},
                    {%- if p.explode.is_some() %}Some({{ p.explode.unwrap() }}){%- else %}None{%- endif %},
                ),
            );
        } else {
            {% if p.required %}
            return Err(anyhow!("Missing required parameter '{{ p.name }}'"));
            {% else %}
            // optional parameter
            {% endif %}
        }
        {% endfor %}

        if let Some(body) = req.body {
            match body {
                Value::Object(map) => {
                    for (k, v) in map { data_map.insert(k, v); }
                }
                other => {
                    data_map.insert("body".to_string(), other);
                }
            }
        }

        Ok(serde_json::from_value(Value::Object(data_map))?)
    }
}

pub fn handler(req: TypedHandlerRequest<Request>) -> Response {
    crate::controllers::{{ handler_name }}::handle(req)
}
